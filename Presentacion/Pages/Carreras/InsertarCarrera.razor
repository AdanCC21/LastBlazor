@page "/InsertarCarrera"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Routing

@using Services;
@using Entitties.Models;

@inject S_Carrera CarreraServicios;
@inject NavigationManager navigationManager;
@inject SweetAlertServicio SweetAlert;
@inject ToasterServicio Toaster;


<!-- Contenedor principal de la página -->
<div class="container">
    <!-- Título de la sección -->
    <h4 class="fw-bold mb-3">Gestión de carreras</h4>

    <!-- Fila centrada para el contenido -->
    <div class="row justify-content-center mt-5">
        <!-- Columna con un ancho específico para dispositivos medianos y grandes -->
        <div class="col-md-8 col-lg-6">

            <!-- Tarjeta con sombra y bordes redondeados -->
            <div class="card border-0 shadow-lg rounded-4 overflow-hidden">
                <!-- Encabezado de la tarjeta con fondo verde y texto blanco -->
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0"><i class="bi bi-mortarboard-fill"></i> Nueva Carrera</h5>
                </div>
                <!-- Cuerpo de la tarjeta -->
                <div class="card-body">
                    <!-- Formulario de edición con validación -->
                    <EditForm Model="@carrera" OnValidSubmit="ConfirmSave" class="needs-validation" novalidate>
                        <DataAnnotationsValidator />

                        <!-- Campo para la clave de la carrera -->
                        <div class="mb-3">
                            <label for="claveCarrera" class="form-label"><i class="bi bi-key-fill"></i> Clave de Carrera</label>
                            <InputText id="claveCarrera" class="form-control form-control-lg" @bind-Value="carrera.ClaveCarrera" />
                            <ValidationMessage For="@(() => carrera.ClaveCarrera)" class="text-danger small" />
                        </div>

                        <!-- Campo para el nombre de la carrera -->
                        <div class="mb-3">
                            <label for="nombreCarrera" class="form-label"><i class="bi bi-receipt"></i> Nombre de Carrera</label>
                            <InputText id="nombreCarrera" class="form-control form-control-lg" @bind-Value="carrera.NombreCarrera" />
                            <ValidationMessage For="@(() => carrera.NombreCarrera)" class="text-danger small" />
                        </div>

                        <!-- Campo para el alias de la carrera -->
                        <div class="mb-3">
                            <label for="aliasCarrera" class="form-label"><i class="bi bi-files-alt"></i> Alias de Carrera</label>
                            <InputText id="aliasCarrera" class="form-control form-control-lg" @bind-Value="carrera.AliasCarrera" />
                            <ValidationMessage For="@(() => carrera.AliasCarrera)" class="text-danger small" />
                        </div>

                        <!-- Campo para el estado de la carrera (interruptor) -->
                        <div class="mb-3 form-check form-switch">
                            <InputCheckbox id="estadoCarrera" class="form-check-input" @bind-Value="carrera.EstadoCarrera" />
                            <label for="estadoCarrera" class="form-check-label">Estado de Carrera</label>
                        </div>

                        <!-- Pie de la tarjeta con botones de acción -->
                        <div class="card-footer">
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-12 d-flex justify-content-end">
                                        <!-- Botón para guardar la carrera -->
                                        <button type="submit" class="btn btn-success m-3 mt-0 mb-0"> <i class="bi bi-floppy2"></i>&nbsp;Guardar carrera </button>
                                        <!-- Botón para regresar al listado de carreras -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                    <button @onclick="ConfirmExit()">Ejecutar función</button>

                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private E_Carrera carrera { get; set; } = new E_Carrera();

    protected async Task<bool> ValidaCarerra(E_Carrera carrera)
    {
        if (carrera.IdCarrera < 0)
        {
            await Toaster.ShowError("No es posible poner id negativos", "Id no valido");
            return false;
        }

        if (int.Parse(carrera.ClaveCarrera) < 0)
        {
            await Toaster.ShowError("No es posible poner valores negativos", "Clave no valido");
            return false;
        }

        if (carrera.NombreCarrera == String.Empty)
        {
            await Toaster.ShowError("Nombre de carrera vacia", "Nombre no valido");
            return false;
        }

        if (carrera.AliasCarrera == String.Empty)
        {
            await Toaster.ShowError("Alias de carrera vacia", "Alias no valido");
            return false;
        }

        return true;
    }

    public void ConfirmExit()
    {
        navigationManager.NavigateTo("carreras");
        // bool confirm = await SweetAlert.ShowConfirm("Se perderan los cambios", "Estas seguro de querer salir sin guardar?", "warning");
        // if (confirm)
        // {
        //     navigationManager.NavigateTo("carreras");
        // }
    }

    public async Task ConfirmSave()
    {
        bool validate = await ValidaCarerra(carrera);
        if (!validate)
        {
            return;
        }

        bool confirm = await SweetAlert.ShowConfirm("Una nueva carrera se publicara", "Seguro de querer publicar una nueva carrera");
        if (confirm)
        {
            try
            {
                await CarreraServicios.InsertarCarrera(carrera);
                await Toaster.ShowSuccess("La carrera se inserto con exito", "Exito");
                navigationManager.NavigateTo("carreras");
            }
            catch(Exception ex)
            {
                await Toaster.ShowError(ex.Message, "Error");
            }
        }
    }
}