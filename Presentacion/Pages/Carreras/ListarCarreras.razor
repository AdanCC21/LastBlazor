@page "/carreras"

@using Entitties.Models;
@using Microsoft.AspNetCore.Components.Routing
@using Services;

@inject S_Carrera carreraService;
@inject NavigationManager navigationManager
@inject SweetAlertServicio SweetAlert
@inject ToasterServicio Toaster;

<div class="container">
	<h4 class="fw-bold mt-3 mb-3 "> Gestión de carreras</h4>

	<div class="row mt-3 mb-5">
		<div class="d-flex flex-column w-100">
			<p class="fw-bold">Existen: @LstCarreras.Count() carreras.</p>
			<NavLink href="InsertarCarrera" class="ms-auto mb-2 btn btn-success" style="width:fit-content;"><i class="bi bi-plus-circle-fill"></i>&nbsp; Nueva Carrera</NavLink>
		</div>
		<table class="table table-striped table-bordered">
			<thead>
				<tr class="text-center">
					<th>CLAVE</th>
					<th>NOMBRE</th>
					<th>ALIAS</th>
					<th>Estado</th>
					<th>Acciones</th>
				</tr>
			</thead>
			<tbody>
				@if (!LstCarreras.Any())
				{
					<tr>
						<td class="text-center fw-bold text-danger" colspan="5">No hay carreras registradas.</td>
					</tr>
				}
				else
				{
					foreach (E_Carrera carrera in LstCarreras)
					{
						<tr class="text-center">
							<td>@carrera.ClaveCarrera</td>
							<td class="text-lg-start">@carrera.NombreCarrera</td>
							<td class="align-content-center">@carrera.AliasCarrera</td>
							<td>
								<span class="bg-estado badge bg-@(carrera.EstadoCarrera ? "success" : "danger")">
									@(carrera.EstadoCarrera ? "Activo" : "Inactivo")
								</span>
							</td>
							<td class="text-center">
								<NavLink href="@($"ModificarCarrera/{carrera.IdCarrera}")" class="btn btn-sm btn-outline-primary" data-toggle="tooltip" title="Edita los datos de la carrera"><i class="bi bi-pen"></i></NavLink>
								<NavLink href="@($"InsertarMateria/{carrera.IdCarrera}")" class="btn btn-sm btn-outline-warning" data-toggle="tooltip" title="Agregar materias a la materia"><i class="bi bi-layout-text-sidebar"></i></NavLink>
								<button class="btn btn-outline-danger btn-sm" data-toggle="tooltip" title="Borra los datos de la materia" @onclick="()=>ConfirmDeleteCarrera(carrera.IdCarrera)"> <i class="bi bi-trash-fill"></i> </button>
							</td>
						</tr>
					}
				}

			</tbody>
		</table>
	</div>
</div>


@code {
	private IEnumerable<E_Carrera> LstCarreras { get; set; } = new List<E_Carrera>();


	protected override async Task OnInitializedAsync()
	{
		LstCarreras = await carreraService.ObtenerCarreras();
	}

	protected async Task ConfirmDeleteCarrera(int idCarrera)
	{
		
		bool confirm = await SweetAlert.ShowConfirm("!!ESPERA!!", "Estas a punto de eliminar una carrera, estas seguro?", "warning");
		if (confirm)
		{
			try
			{
				await BorrarCarrera(idCarrera);
				await Toaster.ShowSuccess("carrera eliminada", "Exito");
			}catch(Exception ex)
			{
				await Toaster.ShowSuccess(ex.Message, "Exito");

			}
		}
		else
		{
			await SweetAlert.ShowAlert("Movimiento Cancelado", "No se realizo ningun cambio");
		}
	}

	private async Task BorrarCarrera(int idCarrera)
	{
		try
		{
			await carreraService.EliminarCarrera(idCarrera);
			LstCarreras = await carreraService.ObtenerCarreras();
		}
		catch (Exception ex)
		{
			await SweetAlert.ShowAlert(ex.Message, "No se realizo ningun cambio");

		}

	}
}
